version: 2.1
orbs:
   multirepo: dnephin/multirepo@0.0.7
   container-metrics: externalreality/container-metrics@0.0.1

executors:
  rust-grpc-protoc:
    docker:
      - image: externalreality/invoices-build-image
    resource_class: medium

jobs:
  grpc_protocol:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - run:
          name: Get Git
          command: apt update && apt install git -yy
      - run:
          name: Build GRPC Protobuf Protocols
          command: cargo build -p grpc_protocol
      - persist_to_workspace:
          root: ./grpc_protocol
          paths:
            - src
      - gen-cache-key-vars
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: &cargo-cache-key v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}

  analysis_server:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - run:
          name: Get Git
          command: apt update && apt install git -yy
      - build-service:
          display_name: Analysis Server
          package_name: analysis_server

  invoice_server:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - build-service:
          display_name: Invoice Server
          package_name: invoice_server

  rating_server:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - build-service:
          display_name: Rating Server
          package_name: rating_server

  invoice_cli:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - build-service:
          display_name: Invoice CLI
          package_name: invoice_cli
      - run: echo $(timeout 20s yes > /dev/null)

workflows:
  version: 2
  build:
    jobs:
      - grpc_protocol:
          pre-steps:
            - container-metrics/plot-resource-usage
          post-steps:
            - container-metrics/upload-resource-usage-plot:
              when: always
      - analysis_server:
          pre-steps:
            - container-metrics/plot-resource-usage
          post-steps:
            - container-metrics/upload-resource-usage-plot
          requires:
            - grpc_protocol
      - invoice_server:
          pre-steps:
            - container-metrics/plot-resource-usage
          post-steps:
            - container-metrics/upload-resource-usage-plot
          requires:
            - grpc_protocol
      - rating_server:
          pre-steps:
            - container-metrics/plot-resource-usage
          post-steps:
            - container-metrics/upload-resource-usage-plot
          requires:
            - grpc_protocol
      - invoice_cli:
          pre-steps:
            - container-metrics/plot-resource-usage
          post-steps:
            - container-metrics/upload-resource-usage-plot
          requires:
            - grpc_protocol

commands:
  gen-cache-key-vars:
    description: "Generate cache key files"
    steps:
      - run:
          name: Calculate Cache Key Vars
          command: rustc --version >rust-version

  build-service:
    description: "Boilerplate Rust service build config"
    parameters:
      display_name:
        type: string
      package_name:
        type: string
    steps:
      - attach_workspace:
          at: ./grpc_protocol
      - gen-cache-key-vars
      - restore_cache:
          keys:
            - *cargo-cache-key
      - run:
          name: Check << parameters.display_name >>
          command: cargo check -p << parameters.package_name >>
      - run:
          name: Build << parameters.display_name >>
          command: cargo build -p << parameters.package_name >>
      - run:
          name: Test << parameters.display_name >>
          command: cargo test -p << parameters.package_name >>
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: *cargo-cache-key
